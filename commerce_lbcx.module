<?php



/**
 * Implements hook_menu().
 */
function commerce_lbcx_menu() {
  $items['commerce_lbcx/webhook'] = array(
    'page callback' => 'commerce_lbcx_webhook',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  $items['commerce_lbcx/orders'] = array(
    'page callback' => 'commerce_lbcx_orders',
    'access callback' => true,
  );
  $items['commerce_lbcx/orders/send'] = array(
    'page callback' => 'commerce_lbcx_orders_send',
    'access callback' => true,
  );

  return $items;
}

/**
 * Returns the security token for Authorization header.
 *
 * Documentation: http://docs.lbcx.ph/#authorization
 */
function _commerce_lbcx_authorization() {
  
  $token = array(
    'iat' => time(),
    'jti' => uniqid(),
    'sub' => variable_get('lbcx_api_key', '72758e5ddaa3fdea'),
  );

  return JWT::encode($token, variable_get('lbcx_secret_key', '2eecea15fd86428077b0cb7b9d1ccbba'));
}

/**
 * cURL request handler.
 */
function commerce_lbcx_send_request($request_fields, $url) {

  $ch = curl_init($url);

  curl_setopt_array($ch, $request_fields);

  $response = curl_exec($ch);

  if(curl_errno($ch)) {
      $error_message  = 'Error occurred: ' . curl_error($ch);
      $error_code     = curl_errno($ch);
    } elseif(curl_getinfo($ch, CURLINFO_HTTP_CODE) != 200) {
      $error_code     = curl_getinfo($ch, CURLINFO_HTTP_CODE);
      $error_message  = "Error occurred. HTTP code: '{$error_code}'";
    }

    curl_close($ch);

    if (!empty($error_message)) {
      throw new RuntimeException($error_message, $error_code);
      return $error_code . ' ' . $error_message;
    }

    parse_str($response);

    return $response;
}

/**
 * Returns a list of orders. 
 *
 * Documentation: https://documenter.getpostman.com/view/573391/orders-api/2PMscX#ce36683-ef0a-8e7f-3655-bdba70de6796
 */
function commerce_lbcx_orders() {
  $url = 'http://api.staging.lbcx.ph/v1/orders';

  $authorization_key = _commerce_lbcx_authorization();

  $request_fields = array(
    CURLOPT_HEADER => 1,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HTTPHEADER => array(
      "Authorization: Bearer " . $authorization_key,
      'Content-type: multipart/form-data; boundary=---011000010111000001101001'
    ),
  );

  $response_fields = commerce_lbcx_send_request($request_fields, $url);

  return 'Test Environment';
}

/**
 * Send order.
 */
function commerce_lbcx_orders_send() {
  $url = 'http://api.staging.lbcx.ph/v1/orders';

  $authorization_key = _commerce_lbcx_authorization();

  $data = array(
    'currency' => 'PHP',
    'total' => 1000,
    'payment_method' => 'credit_card',
    'payment_provider' => 'paypal',
    'status' => 'pending',
    'buyer_name' => 'Lyza Samaco',
    'shipment' => 'us-air',
    'metadata' => array(
      'account_number' => '12-687473',
    ),
    'delivery_address' => array(
      'name' => 'Lyza Samaco',
      'email' => 'rrofiles.dev@gmail.com',
      'company' => 'Shinra Software Solutions',
      'phone_number' => '434-7777',
      'mobile_number' => '+639192949244',
      'line_1' => '3F Romari Bldg.,',
      'line_2' => 'Quirino Hwy., Sangandaan',
      'city' => 'Quezon City',
      'state' => 'NCR',
      'postal_code' => '1131',
      'country' => 'Philippines',
    ),
    'reference_id' => '001',
    'email' => 'rrofiles.dev@gmail.com',
    'contact_number' => '+639192949244',
    'remarks' => 'Test Order',
    'items' => array(
      array(
        'description' => 'Item 1',
        'parcel_id' => 1,
        'type' => 'product',
        'amount' => 0,
        'insured_value' => 100,
      ),
    ),
  );

  $request_fields = array(
    CURLOPT_HEADER => 1,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HTTPHEADER => array(
      "Authorization: " . $authorization_key,
      'Content-type: application/json',
      'x-time-zone: Asia/Manila',
    ),
    CURLOPT_POSTFIELDS => json_encode($data),
  );

  $response_fields = commerce_lbcx_send_request($request_fields, $url);

  dsm($response_fields);

  return 'Test Environment';
}

/**
 * 
 */
function commerce_lbcx_webhook() {  
  $data = json_decode($_POST['data']);
  dpm($data);

  return '';
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_lbcx_commerce_payment_method_info() {
  $payment_methods['lbcx'] = array(
    'base' => 'commerce_lbcx',
    'title' => t('LBCX'),
    'short_title' => t('LBCX'),
    'description' => t('LBCX Payments'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );  

  return $payment_methods;
}

/**
 * Returns the default settings for the LBCX standard payment method.
 */
function commerce_lbcx_default_settings() {
  return array(
    'api_key' => '',
    'secret_key' => '',
    'payment_provider' => '',
    'currency_code' => 'PHP',
    'server' => 'sandbox',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_lbcx_settings_form($settings = array()) {

  $settings = (array) $settings + commerce_lbcx_default_settings();

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'API Key',
    '#description' => 'A unique code assigned by LBCX.',
    '#default_value' => $settings['api_key'],
    '#required' => true,
  );
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Secret Key',
    '#description' => 'A unique code for assigned by LBCX for checksum validation.',
    '#default_value' => $settings['secret_key'],
    '#required' => true,
  );
  $form['payment_provider'] = array(
    '#type' => 'select',
    '#title' => 'Payment Provider',
    '#description' => 'Payment provider that processed the payment',
    '#options' => array(
      'asiapay' => 'AsiaPay',
      'dragonpay' => 'Dragonpay',
      'lbc' => 'LBC',
      'lbcx' => 'LBCX',
    ),
    '#default_value' => $settings['payment_provider'],
    '#required' => true,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => 'LBCX Server',
    '#options' => array(
      'sandbox' => t('Sandbox Server'),
      'live' => t('Live Server'),
    ),
    '#default_value' => $settings['server'],
    '#required' => true,
  );

  return $form;
}

/**
 * Payment method callback: Submit form.
 *
 * Adds a message to the submission form if enabled in the payment method.
 */
function commerce_lbcx_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['LBCX_information'] = array(
      '#markup' => '<span class="commerce-lbcx--info">' . t('(Continue with checkout to complete payment via LBCX.)') . '</span>',
    );
  }

  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_lbcx_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a LBCX option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find LBCX ...
      if ($method_id == 'lbcx') {
        // Prepare the replacement radio button text with icons.
        $value = t('LBCX - pay directly with your bank account or with over-the-counter using LBCX secured payment portal.');

        $form['buttons']['continue']['#validate'][] = 'commerce_lbcx_form_commerce_checkout_form_validate';

        break;
      }
    }
  }
}

/**
 * Validate currency.
 */
function commerce_lbcx_form_commerce_checkout_form_validate(&$form, &$form_state) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $commerce_lbcx_currencies = commerce_lbcx_currencies();
  if (!in_array($currency_code, $commerce_lbcx_currencies)) {
    form_set_error('', t('Sorry, your order currency is not supported by LBCX.'));
  }
}

/**
 * Payment method callback: Redirect form.
 *
 * A wrapper around the module's general use function for building a form.
 */
function commerce_lbcx_redirect_form($form, &$form_state, $order, $payment_method) {
  
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['merchantid'])) {
    drupal_set_message(t('LBCX is not configured for use. No LBCX Merchant ID has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],

    // Include the application indicator.
    'bn' => $payment_method['buttonsource'],
  );

  return commerce_lbcx_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * @return array
 *   A renderable form array.
 */
function commerce_lbcx_order_form($form, &$form_state, $order, array $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $settings['currency_code'];
  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();
 
  $amount = commerce_currency_convert($wrapper->commerce_order_total->amount->value(), $order_currency_code, $currency_code);

  $settings += array('payment_method' => '');

  $data = array(
    'merchantid' => $settings['merchantid'],
    'amount' => commerce_lbcx_currency_amount_to_decimal($amount, $currency_code),
    'ccy' => $currency_code,
    'description' => token_replace($settings['description'], array('commerce-order' => $order)),
    'email' => $order->mail,
  );

  drupal_alter('commerce_lbcx_order_form_data', $data, $order);

  $server_url = commerce_lbcx_server_url($settings['server']);

  // Add the redirect path.
  $form['#action'] = url($server_url, array('query' => $data, 'absolute' => TRUE));

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to LBCX'),
  );

  return $form;
}

function commerce_lbcx_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'http://api.staging.lbcx.ph/v1';

    case 'live':
      return 'http://api.lbcx.ph/v1';
  }
}

function commerce_lbcx_currency_amount_to_decimal($amount, $currency_code) {
  $val = commerce_currency_amount_to_decimal($amount, $currency_code);
  return sprintf('%0.2f', $val);
}

function _commerce_lbcx_error_codes() {
  return array(
    '200' => 'Success',
    '400' => 'Bad Request',
    '401' => 'Unauthorized',
    '404' => 'Not Found',
    '413' => 'Request Entity Too Large',
    '422' => 'Unprocessable Entity',
    '429' => 'Too Many Requests',
    '500' => 'Internal Server Error',
  );
}