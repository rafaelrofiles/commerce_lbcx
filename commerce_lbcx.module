<?php

define('TEST_API_KEY', '72758e5ddaa3fdea');
define('TEST_SECRET_KEY', '2eecea15fd86428077b0cb7b9d1ccbba');

/**
 * Implements hook_menu().
 */
function commerce_lbcx_menu() {
  $items['commerce_lbcx/callback'] = array(
    'page callback' => 'commerce_lbcx_callback',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  $items['commerce_lbcx/orders'] = array(
    'page callback' => 'commerce_lbcx_orders',
    'access callback' => true,
  );
  $items['commerce_lbcx/order/send'] = array(
    'page callback' => 'commerce_lbcx_order',
    'access callback' => true,
  );

  return $items;
}

/**
 *
 */
function commerce_lbcx_order() {
  $token = _commerce_lbcx_authorization();
  $url = 'http://api.staging.lbcx.ph/v1/orders';
  $curl = curl_init($url);
  $curlopt_httpheader = array(
    "authorization: Bearer $token",
    'content-type: application/json'
  );

  $request_fields = array(
    'name' => 'Test Test',
    'line_1' => '3F Romari Bldg., Quirino Hwy.,',
    'city' => 'Quezon City',
    'state' => 'NCR',
    'postal_code' => '1131',
    'country' => 'PH',

    'type' => 'shipping',
    'description' => 'Shipping Fee',
    'amount' => '30.00',
    
  );

  curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request_fields));
}

/**
 * 
 */
function commerce_lbcx_callback() {
  
  /** @TODO Callback code here */
}

/**
 * Returns the security token for Authorization header.
 *
 * Documentation: http://docs.lbcx.ph/#authorization
 */
function _commerce_lbcx_authorization() {
  $api_key = TEST_API_KEY;
  $secret_key = TEST_SECRET_KEY;

  $header = base64_encode('{"alg": "HS256","typ": "JWT"}');

  $payload = base64_encode('{"iat": ' . time() . ',"jti": "' . uniqid() . '","sub": "' . $api_key . '"}');

  $header_payload_combine = $header . '.' . $payload;

  $signature = JWT::encode($header_payload_combine, $secret_key);

  // $signature = base64_encode(hash_hmac('sha256', $header_payload_combine, $secret_key, true));
  
  $token = $header_payload_combine . '.' . $signature;

  return $token;
}

/**
 * Returns a list of orders. 
 *
 * Documentation: https://documenter.getpostman.com/view/573391/orders-api/2PMscX#ce36683-ef0a-8e7f-3655-bdba70de6796
 */
function commerce_lbcx_orders() {

  $url = 'http://api.staging.lbcx.ph/v1/orders';
  
  $ch = curl_init($url);

  curl_setopt_array($ch, array(
    CURLOPT_HEADER => 1,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HTTPHEADER => array(
      "Authorization: Bearer " . _commerce_lbcx_authorization(),
      'Content-type: multipart/form-data; boundary=---011000010111000001101001'
    )
  ));

  $responseFields = curl_exec($ch);

  dpm(array(
    'http_code' => curl_getinfo($ch, CURLINFO_HTTP_CODE),
    'err_no' => curl_errno($ch),
    'responseFields' => $responseFields,
  ));

  curl_close($ch);


  return 'test';
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_lbcx_commerce_payment_method_info() {
  $payment_methods['lbcx'] = array(
    'base' => 'commerce_lbcx',
    'title' => t('LBCX'),
    'short_title' => t('LBCX'),
    'description' => t('LBCX Payments'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );  

  return $payment_methods;
}

/**
 * Returns the default settings for the LBCX standard payment method.
 */
function commerce_lbcx_default_settings() {
  return array(
    'api_key' => '',
    'secret_key' => '',
    'currency_code' => 'PHP',
    'server' => 'sandbox',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_lbcx_settings_form($settings = array()) {

  $settings = (array) $settings + commerce_lbcx_default_settings();

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'API Key',
    '#description' => 'A unique code assigned by LBCX.',
    '#default_value' => $settings['api_key'],
    '#required' => true,
  );
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Secret Key',
    '#description' => 'A unique code for assigned by LBCX for checksum validation.',
    '#default_value' => $settings['secret_key'],
    '#required' => true,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => 'LBCX Server',
    '#options' => array(
      'sandbox' => t('Sandbox Server'),
      'live' => t('Live Server'),
    ),
    '#default_value' => $settings['server'],
    '#required' => true,
  );

  return $form;
}

/**
 * Payment method callback: Submit form.
 *
 * Adds a message to the submission form if enabled in the payment method.
 */
function commerce_lbcx_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['Dragonpay_information'] = array(
      '#markup' => '<span class="commerce-dragonpay--info">' . t('(Continue with checkout to complete payment via Dragonpay.)') . '</span>',
    );
  }

  return $form;
}

/**
 * Payment method callback: Redirect form.
 *
 * A wrapper around the module's general use function for building a form.
 */
function commerce_lbcx_redirect_form($form, &$form_state, $order, $payment_method) {
  $form['test'] = array(
    '#type' => 'textfield',
    '#title' => 'Test',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay using LBCX'),
  );

  return $form;
}