<?php

/**
 * Implements hook_menu().
 */
function commerce_lbcx_menu() {
  $items['commerce_lbcx/webhook'] = array(
    'page callback' => 'commerce_lbcx_webhook',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  $items['commerce_lbcx/orders'] = array(
    'page callback' => 'commerce_lbcx_orders',
    'access callback' => true,
  );
  $items['commerce_lbcx/orders/send'] = array(
    'page callback' => 'commerce_lbcx_orders_send',
    'access callback' => true,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_lbcx_commerce_payment_method_info() {
  $base = array(
    'base' => 'commerce_lbcx',
    'terminal' => false,
    'offsite' => false,
  );
  $payment_methods['lbcx_credit_card'] = $base + array(
    'title' => t('LBCX - Credit Card'),
    'description' => 'Pay using credit card.',
  );
  $payment_methods['lbcx_cod'] = $base + array(
    'title' => t('LBCX - Cash On Delivery'),
    'description' => 'Pay using cash on delivery.',
  );
  $payment_methods['lbcx_otc'] = $base + array(
    'title' => t('LBCX - Over the counter'),
    'description' => 'Pay using Bayad Center...',
  );
  $payment_methods['lbcx_debit_card'] = $base + array(
    'title' => t('LBCX - Debit Card'),
    'description' => 'Pay using debit card.',
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_lbcx_settings_form($settings = array()) {

  $settings = (array) $settings;

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'API Key',
    '#description' => 'A unique code assigned by LBCX.',
    '#default_value' => isset($settings['api_key']) ? $settings['api_key'] : '',
    '#required' => true,
  );
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Secret Key',
    '#description' => 'A unique code for assigned by LBCX for checksum validation.',
    '#default_value' => isset($settings['secret_key']) ? $settings['secret_key'] : '',
    '#required' => true,
  );
  $form['payment_provider'] = array(
    '#type' => 'select',
    '#title' => 'Payment Provider',
    '#description' => 'Payment provider that processed the payment',
    '#options' => array(
      'asiapay' => 'AsiaPay',
      'dragonpay' => 'Dragonpay',
      'lbc' => 'LBC',
      'lbcx' => 'LBCX',
    ),
    '#default_value' => isset($settings['payment_provider']) ? $settings['payment_provider'] : '',
    '#required' => true,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => 'LBCX Server',
    '#options' => array(
      'sandbox' => t('Sandbox Server'),
      'live' => t('Live Server'),
    ),
    '#default_value' => isset($settings['server']) ? $settings['server'] : 'sandbox',
    '#required' => true,
  );

  return $form;
}

/**
 * Payment method callback: Submit form submit.
 */
function commerce_lbcx_submit_form_submit($payment_method, $pane_values, $checkout_pane, $order) {
  $url = commerce_lbcx_server_url($payment_method['settings']['server']);

  $authorization_key = _commerce_lbcx_authorization(
    $payment_method['settings']['api_key'], $payment_method['settings']['secret_key']
  );

  $data = array(
    'currency' => 'PHP',
    'total' => 1000,
    'payment_method' => 'credit_card',
    'payment_provider' => 'paypal',
    'status' => 'pending',
    'buyer_name' => 'Lyza Samaco',
    'shipment' => 'us-air',
    'metadata' => array(
      'account_number' => '12-687473',
    ),
    'delivery_address' => array(
      'name' => 'Lyza Samaco',
      'email' => 'rrofiles.dev@gmail.com',
      'company' => 'Shinra Software Solutions',
      'phone_number' => '434-7777',
      'mobile_number' => '+639192949244',
      'line_1' => '3F Romari Bldg.,',
      'line_2' => 'Quirino Hwy., Sangandaan',
      'city' => 'Quezon City',
      'state' => 'NCR',
      'postal_code' => '1131',
      'country' => 'Philippines',
    ),
    'reference_id' => '001',
    'email' => 'rrofiles.dev@gmail.com',
    'contact_number' => '+639192949244',
    'remarks' => 'Test Order',
    'items' => array(
      array(
        'description' => 'Item 1',
        'parcel_id' => 1,
        'type' => 'product',
        'amount' => 0,
        'insured_value' => 100,
      ),
    ),
  );

  $request_fields = array(
    CURLOPT_HEADER => 1,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HTTPHEADER => array(
      "Authorization: " . $authorization_key,
      'Content-type: application/json',
      'x-time-zone: Asia/Manila',
    ),
    CURLOPT_POSTFIELDS => json_encode($data),
  );

  $response_fields = commerce_lbcx_send_request($request_fields, $url);
}

/**
 * Returns the security token for Authorization header.
 *
 * Documentation: http://docs.lbcx.ph/#authorization
 */
function _commerce_lbcx_authorization($api_key, $secret_key) {
  
  $token = array(
    'iat' => time(),
    'jti' => uniqid(),
    'sub' => $api_key,
  );

  return JWT::encode($token, $secret_key);
}

/**
 * cURL request handler.
 */
function commerce_lbcx_send_request($request_fields, $url) {

  $ch = curl_init($url);

  curl_setopt_array($ch, $request_fields);

  $response = curl_exec($ch);

  if(curl_errno($ch)) {
      $error_message  = 'Error occurred: ' . curl_error($ch);
      $error_code     = curl_errno($ch);
    } elseif(curl_getinfo($ch, CURLINFO_HTTP_CODE) != 200) {
      $error_code     = curl_getinfo($ch, CURLINFO_HTTP_CODE);
      $error_message  = "Error occurred. HTTP code: '{$error_code}'";
    }

    curl_close($ch);

    // if (!empty($error_message)) {
    //   throw new RuntimeException($error_message, $error_code);
    //   return $error_code . ' ' . $error_message;
    // }

    parse_str($response);

    return $response;
}

/**
 * Returns a list of orders. 
 *
 * Documentation: https://documenter.getpostman.com/view/573391/orders-api/2PMscX#ce36683-ef0a-8e7f-3655-bdba70de6796
 */
function commerce_lbcx_orders() {
  $url = 'http://api.staging.lbcx.ph/v1/orders';

  $authorization_key = _commerce_lbcx_authorization('72758e5ddaa3fdea', '2eecea15fd86428077b0cb7b9d1ccbba');

  $request_fields = array(
    CURLOPT_HEADER => 1,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HTTPHEADER => array(
      "Authorization: Bearer " . $authorization_key,
      'Content-type: multipart/form-data; boundary=---011000010111000001101001'
    ),
  );

  $response_fields = commerce_lbcx_send_request($request_fields, $url);

  return serialize($response_fields);
}

function commerce_lbcx_webhook() {  

  $_POST['data'] = json_encode(array(
    'event' => 'status_update',
    'timestamp' => time(),
    'data' => array(
      array(
        'tracking_number' => 'asda3e90',
        'reference_id' => '1',
        'created_at' => '2016-01-01 09:12:23+08',
        'status_update_at' => null,
        'status' => 'pending',
      ),
      array(
        'tracking_number' => 'sdassd22',
        'reference_id' => '2',
        'created_at' => '2016-01-01 09:12:23+08',
        'status_update_at' => null,
        'status' => 'pending',
      ),
    ),
  ));  
  $data = json_decode($_POST['data']);

  foreach ($data->data as $key => $order) {
    $commerce_order = commerce_order_load($order->reference_id);
    
  }

  return 'test';
}

function commerce_lbcx_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'http://api.staging.lbcx.ph/v1/orders';

    case 'live':
      return 'http://api.lbcx.ph/v1/orders';
  }
}

function commerce_lbcx_currency_amount_to_decimal($amount, $currency_code) {
  $val = commerce_currency_amount_to_decimal($amount, $currency_code);
  return sprintf('%0.2f', $val);
}

function _commerce_lbcx_status_codes() {
  return array(
    'paid' => 'Paid',
    'confirmed' => 'Confirmed',
    'pending' => 'Pending',
    'for_pickup' => 'For Pickup',
    'picked_up' => 'Picked-up',
    'failed_pickup' => 'Failed Pickup',
    'in_transit' => 'In Transit',
    'completed' => 'Delivered',
    'refunded' => 'Refunded',
    'canceled' => 'Canceled',
  );
}

function _commerce_lbcx_error_codes() {
  return array(
    '200' => 'Success',
    '400' => 'Bad Request',
    '401' => 'Unauthorized',
    '404' => 'Not Found',
    '413' => 'Request Entity Too Large',
    '422' => 'Unprocessable Entity',
    '429' => 'Too Many Requests',
    '500' => 'Internal Server Error',
  );
}

function commerce_lbcx_currencies($method_id = 'default') {
  switch ($method_id) {
    default:
      return drupal_map_assoc(array('PHP', 'USD'));
  }
}

function commerce_lbcx_log($message) {
  global $user;
  $log_date = new DateTime();
  db_insert('commerce_lbcx_log')->fields(array(
    'log_date' => $log_date->format('Y-m-d H:i:s'),
    'log_message' => check_plain($message),
    'logged_by' => $user->uid,
  ))->execute();
}